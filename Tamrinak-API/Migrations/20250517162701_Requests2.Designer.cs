// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tamrinak_API.DataAccess;

#nullable disable

namespace Tamrinak_API.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250517162701_Requests2")]
    partial class Requests2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tamrinak_API.DataAccess.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<int?>("FacilityId")
                        .HasColumnType("int");

                    b.Property<int?>("FieldId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfPeople")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int?>("SportId")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BookingId");

                    b.HasIndex("FieldId");

                    b.HasIndex("UserId");

                    b.HasIndex("SportId", "FacilityId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Tamrinak_API.DataAccess.Models.Facility", b =>
                {
                    b.Property<int>("FacilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FacilityId"));

                    b.Property<TimeOnly>("CloseTime")
                        .HasColumnType("time");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("LocationDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationMap")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OfferDurationInMonths")
                        .HasColumnType("int");

                    b.Property<decimal?>("OfferPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<TimeOnly>("OpenTime")
                        .HasColumnType("time");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PricePerMonth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("FacilityId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Facilities");
                });

            modelBuilder.Entity("Tamrinak_API.DataAccess.Models.Field", b =>
                {
                    b.Property<int>("FieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FieldId"));

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("CloseTime")
                        .HasColumnType("time");

                    b.Property<int?>("FacilityId")
                        .HasColumnType("int");

                    b.Property<bool?>("HasLighting")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsIndoor")
                        .HasColumnType("bit");

                    b.Property<string>("LocationDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationMap")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("OpenTime")
                        .HasColumnType("time");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PricePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SportId")
                        .HasColumnType("int");

                    b.HasKey("FieldId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("SportId");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("Tamrinak_API.DataAccess.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Base64Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FacilityId")
                        .HasColumnType("int");

                    b.Property<int?>("FieldId")
                        .HasColumnType("int");

                    b.Property<int?>("SportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("FieldId");

                    b.HasIndex("SportId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Tamrinak_API.DataAccess.Models.Membership", b =>
                {
                    b.Property<int>("MembershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MembershipId"));

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("MonthlyFee")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("TotalOfferPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MembershipId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("UserId");

                    b.ToTable("Memberships");
                });

            modelBuilder.Entity("Tamrinak_API.DataAccess.Models.MembershipOffer", b =>
                {
                    b.Property<int>("OfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfferId"));

                    b.Property<int>("DurationInMonths")
                        .HasColumnType("int");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("OfferId");

                    b.HasIndex("FacilityId");

                    b.ToTable("MembershipsOffer");
                });

            modelBuilder.Entity("Tamrinak_API.DataAccess.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRefunded")
                        .HasColumnType("bit");

                    b.Property<int?>("MembershipId")
                        .HasColumnType("int");

                    b.Property<int>("Method")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RefundedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentId");

                    b.HasIndex("BookingId")
                        .IsUnique()
                        .HasFilter("[BookingId] IS NOT NULL");

                    b.HasIndex("MembershipId")
                        .IsUnique()
                        .HasFilter("[MembershipId] IS NOT NULL");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Tamrinak_API.DataAccess.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("FacilityId")
                        .HasColumnType("int");

                    b.Property<int?>("FieldId")
                        .HasColumnType("int");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<int?>("ParentReviewId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("FieldId");

                    b.HasIndex("ParentReviewId");

                    b.HasIndex("UserId", "FacilityId", "FieldId")
                        .IsUnique()
                        .HasFilter("[FacilityId] IS NOT NULL AND [FieldId] IS NOT NULL");

                    b.ToTable("Reviews", t =>
                        {
                            t.HasCheckConstraint("CK_Review_SingleTarget", "(FacilityId IS NOT NULL AND FieldId IS NULL) OR (FacilityId IS NULL AND FieldId IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("Tamrinak_API.DataAccess.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Description = "Full system access and control",
                            RoleName = "SuperAdmin"
                        },
                        new
                        {
                            RoleId = 2,
                            Description = "Administrative access with most system privileges",
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 3,
                            Description = "Standard registered user",
                            RoleName = "User"
                        },
                        new
                        {
                            RoleId = 4,
                            Description = "Manages specific venue (facility and field) operations",
                            RoleName = "VenueManager"
                        },
                        new
                        {
                            RoleId = 7,
                            Description = "Handles customer inquiries and support",
                            RoleName = "CustomerSupport"
                        },
                        new
                        {
                            RoleId = 8,
                            Description = "Content and user behavior moderation",
                            RoleName = "Moderator"
                        });
                });

            modelBuilder.Entity("Tamrinak_API.DataAccess.Models.Sport", b =>
                {
                    b.Property<int>("SportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SportId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SportId");

                    b.ToTable("Sports");

                    b.HasData(
                        new
                        {
                            SportId = 1,
                            Description = "Popular team sport played with a spherical ball",
                            Name = "Football"
                        },
                        new
                        {
                            SportId = 2,
                            Description = "Fast-paced team sport played on a rectangular court",
                            Name = "Basketball"
                        },
                        new
                        {
                            SportId = 3,
                            Description = "Individual sport performed in a pool or open water",
                            Name = "Swimming"
                        },
                        new
                        {
                            SportId = 4,
                            Description = "Racket sport played individually or in pairs",
                            Name = "Tennis"
                        },
                        new
                        {
                            SportId = 5,
                            Description = "Team sport where playe_I(rs pass and shoot a ball",
                            Name = "Handball"
                        },
                        new
                        {
                            SportId = 6,
                            Description = "Indoor racket sport played on a table",
                            Name = "Table Tennis"
                        },
                        new
                        {
                            SportId = 7,
                            Description = "Gaming counter",
                            Name = "E-Sports"
                        },
                        new
                        {
                            SportId = 8,
                            Description = "Bowling is a target sport and recreational activity in which a player rolls a ball toward pins to get the highest score",
                            Name = "Bowling"
                        },
                        new
                        {
                            SportId = 9,
                            Description = "Racket sport played in an indoor court",
                            Name = "Squash"
                        },
                        new
                        {
                            SportId = 10,
                            Description = "Strength sport involving lifting heavy weights",
                            Name = "Weightlifting"
                        },
                        new
                        {
                            SportId = 11,
                            Description = "Combat sport involving punching and defensive techniques",
                            Name = "Boxing"
                        },
                        new
                        {
                            SportId = 12,
                            Description = "Combat sport involving grappling techniques",
                            Name = "Wrestling"
                        },
                        new
                        {
                            SportId = 13,
                            Description = "Japanese martial art focusing on striking techniques",
                            Name = "Karate"
                        },
                        new
                        {
                            SportId = 14,
                            Description = "Korean martial art known for high kicks and strikes",
                            Name = "Taekwondo"
                        },
                        new
                        {
                            SportId = 15,
                            Description = "Mind-body practice focusing on strength, flexibility, and meditation",
                            Name = "Yoga"
                        },
                        new
                        {
                            SportId = 16,
                            Description = "Form of rock climbing performed without ropes",
                            Name = "Bouldering"
                        },
                        new
                        {
                            SportId = 17,
                            Description = "Team sport played with a ball over a net",
                            Name = "Volleyball"
                        },
                        new
                        {
                            SportId = 18,
                            Description = "Track and field sports including running, jumping, and throwing",
                            Name = "Athletics"
                        },
                        new
                        {
                            SportId = 19,
                            Description = "Martial art focusing on ground fighting and submission",
                            Name = "Brazilian Jiu-Jitsu"
                        });
                });

            modelBuilder.Entity("Tamrinak_API.DataAccess.Models.SportFacility", b =>
                {
                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<int>("SportId")
                        .HasColumnType("int");

                    b.HasKey("FacilityId", "SportId");

                    b.HasIndex("SportId");

                    b.ToTable("SportFacilities");
                });

            modelBuilder.Entity("Tamrinak_API.DataAccess.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasVenueOwnershipRequest")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageBase64")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequestedVenueId")
                        .HasColumnType("int");

                    b.Property<string>("RequestedVenueType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VenueRequestDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Tamrinak_API.DataAccess.Models.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Tamrinak_API.DataAccess.Models.Booking", b =>
                {
                    b.HasOne("Tamrinak_API.DataAccess.Models.Field", "Field")
                        .WithMany("Bookings")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tamrinak_API.DataAccess.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tamrinak_API.DataAccess.Models.SportFacility", "SportFacility")
                        .WithMany("Bookings")
                        .HasForeignKey("SportId", "FacilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Field");

                    b.Navigation("SportFacility");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tamrinak_API.DataAccess.Models.Facility", b =>
                {
                    b.HasOne("Tamrinak_API.DataAccess.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Tamrinak_API.DataAccess.Models.Field", b =>
                {
                    b.HasOne("Tamrinak_API.DataAccess.Models.Facility", "Facility")
                        .WithMany("Fields")
                        .HasForeignKey("FacilityId");

                    b.HasOne("Tamrinak_API.DataAccess.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("Tamrinak_API.DataAccess.Models.Sport", "Sport")
                        .WithMany("Fields")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("Owner");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("Tamrinak_API.DataAccess.Models.Image", b =>
                {
                    b.HasOne("Tamrinak_API.DataAccess.Models.Facility", "Facility")
                        .WithMany("Images")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tamrinak_API.DataAccess.Models.Field", "Field")
                        .WithMany("Images")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tamrinak_API.DataAccess.Models.Sport", "Sport")
                        .WithMany("Images")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Facility");

                    b.Navigation("Field");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("Tamrinak_API.DataAccess.Models.Membership", b =>
                {
                    b.HasOne("Tamrinak_API.DataAccess.Models.Facility", "Facility")
                        .WithMany("Memberships")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tamrinak_API.DataAccess.Models.User", "User")
                        .WithMany("Memberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tamrinak_API.DataAccess.Models.MembershipOffer", b =>
                {
                    b.HasOne("Tamrinak_API.DataAccess.Models.Facility", "Facility")
                        .WithMany("MembershipOffers")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("Tamrinak_API.DataAccess.Models.Payment", b =>
                {
                    b.HasOne("Tamrinak_API.DataAccess.Models.Booking", "Booking")
                        .WithOne("Payment")
                        .HasForeignKey("Tamrinak_API.DataAccess.Models.Payment", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tamrinak_API.DataAccess.Models.Membership", "Membership")
                        .WithOne("Payment")
                        .HasForeignKey("Tamrinak_API.DataAccess.Models.Payment", "MembershipId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Booking");

                    b.Navigation("Membership");
                });

            modelBuilder.Entity("Tamrinak_API.DataAccess.Models.Review", b =>
                {
                    b.HasOne("Tamrinak_API.DataAccess.Models.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tamrinak_API.DataAccess.Models.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tamrinak_API.DataAccess.Models.Review", "ParentReview")
                        .WithMany("Replies")
                        .HasForeignKey("ParentReviewId");

                    b.HasOne("Tamrinak_API.DataAccess.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("Field");

                    b.Navigation("ParentReview");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tamrinak_API.DataAccess.Models.SportFacility", b =>
                {
                    b.HasOne("Tamrinak_API.DataAccess.Models.Facility", "Facility")
                        .WithMany("SportFacilities")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tamrinak_API.DataAccess.Models.Sport", "Sport")
                        .WithMany("SportFacilities")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("Tamrinak_API.DataAccess.Models.UserRole", b =>
                {
                    b.HasOne("Tamrinak_API.DataAccess.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tamrinak_API.DataAccess.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tamrinak_API.DataAccess.Models.Booking", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("Tamrinak_API.DataAccess.Models.Facility", b =>
                {
                    b.Navigation("Fields");

                    b.Navigation("Images");

                    b.Navigation("MembershipOffers");

                    b.Navigation("Memberships");

                    b.Navigation("SportFacilities");
                });

            modelBuilder.Entity("Tamrinak_API.DataAccess.Models.Field", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("Tamrinak_API.DataAccess.Models.Membership", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("Tamrinak_API.DataAccess.Models.Review", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Tamrinak_API.DataAccess.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Tamrinak_API.DataAccess.Models.Sport", b =>
                {
                    b.Navigation("Fields");

                    b.Navigation("Images");

                    b.Navigation("SportFacilities");
                });

            modelBuilder.Entity("Tamrinak_API.DataAccess.Models.SportFacility", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Tamrinak_API.DataAccess.Models.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Memberships");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
